/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './app/routes/__root'
import { Route as ProtectedRouteImport } from './app/routes/_protected'
import { Route as IndexRouteImport } from './app/routes/index'
import { Route as authSignUpRouteImport } from './app/routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './app/routes/(auth)/sign-in'
import { Route as ProtecteddashboardRouteRouteImport } from './app/routes/_protected/(dashboard)/route'

const ProtecteddashboardHomeLazyRouteImport = createFileRoute(
  '/_protected/(dashboard)/home',
)()
const ProtecteddashboardAddBookLazyRouteImport = createFileRoute(
  '/_protected/(dashboard)/add-book',
)()
const ProtecteddashboardBooksIndexLazyRouteImport = createFileRoute(
  '/_protected/(dashboard)/books/',
)()
const ProtecteddashboardBooksAddLazyRouteImport = createFileRoute(
  '/_protected/(dashboard)/books/add',
)()
const ProtecteddashboardBooksBookIdLazyRouteImport = createFileRoute(
  '/_protected/(dashboard)/books/$bookId',
)()

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/(auth)/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtecteddashboardRouteRoute = ProtecteddashboardRouteRouteImport.update({
  id: '/(dashboard)',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtecteddashboardHomeLazyRoute =
  ProtecteddashboardHomeLazyRouteImport.update({
    id: '/home',
    path: '/home',
    getParentRoute: () => ProtecteddashboardRouteRoute,
  } as any).lazy(() =>
    import('./app/routes/_protected/(dashboard)/home.lazy').then(
      (d) => d.Route,
    ),
  )
const ProtecteddashboardAddBookLazyRoute =
  ProtecteddashboardAddBookLazyRouteImport.update({
    id: '/add-book',
    path: '/add-book',
    getParentRoute: () => ProtecteddashboardRouteRoute,
  } as any).lazy(() =>
    import('./app/routes/_protected/(dashboard)/add-book.lazy').then(
      (d) => d.Route,
    ),
  )
const ProtecteddashboardBooksIndexLazyRoute =
  ProtecteddashboardBooksIndexLazyRouteImport.update({
    id: '/books/',
    path: '/books/',
    getParentRoute: () => ProtecteddashboardRouteRoute,
  } as any).lazy(() =>
    import('./app/routes/_protected/(dashboard)/books/index.lazy').then(
      (d) => d.Route,
    ),
  )
const ProtecteddashboardBooksAddLazyRoute =
  ProtecteddashboardBooksAddLazyRouteImport.update({
    id: '/books/add',
    path: '/books/add',
    getParentRoute: () => ProtecteddashboardRouteRoute,
  } as any).lazy(() =>
    import('./app/routes/_protected/(dashboard)/books/add.lazy').then(
      (d) => d.Route,
    ),
  )
const ProtecteddashboardBooksBookIdLazyRoute =
  ProtecteddashboardBooksBookIdLazyRouteImport.update({
    id: '/books/$bookId',
    path: '/books/$bookId',
    getParentRoute: () => ProtecteddashboardRouteRoute,
  } as any).lazy(() =>
    import('./app/routes/_protected/(dashboard)/books/$bookId.lazy').then(
      (d) => d.Route,
    ),
  )

export interface FileRoutesByFullPath {
  '/': typeof ProtecteddashboardRouteRouteWithChildren
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/add-book': typeof ProtecteddashboardAddBookLazyRoute
  '/home': typeof ProtecteddashboardHomeLazyRoute
  '/books/$bookId': typeof ProtecteddashboardBooksBookIdLazyRoute
  '/books/add': typeof ProtecteddashboardBooksAddLazyRoute
  '/books': typeof ProtecteddashboardBooksIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof ProtecteddashboardRouteRouteWithChildren
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/add-book': typeof ProtecteddashboardAddBookLazyRoute
  '/home': typeof ProtecteddashboardHomeLazyRoute
  '/books/$bookId': typeof ProtecteddashboardBooksBookIdLazyRoute
  '/books/add': typeof ProtecteddashboardBooksAddLazyRoute
  '/books': typeof ProtecteddashboardBooksIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/(dashboard)': typeof ProtecteddashboardRouteRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/_protected/(dashboard)/add-book': typeof ProtecteddashboardAddBookLazyRoute
  '/_protected/(dashboard)/home': typeof ProtecteddashboardHomeLazyRoute
  '/_protected/(dashboard)/books/$bookId': typeof ProtecteddashboardBooksBookIdLazyRoute
  '/_protected/(dashboard)/books/add': typeof ProtecteddashboardBooksAddLazyRoute
  '/_protected/(dashboard)/books/': typeof ProtecteddashboardBooksIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sign-in'
    | '/sign-up'
    | '/add-book'
    | '/home'
    | '/books/$bookId'
    | '/books/add'
    | '/books'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/sign-up'
    | '/add-book'
    | '/home'
    | '/books/$bookId'
    | '/books/add'
    | '/books'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/(dashboard)'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/_protected/(dashboard)/add-book'
    | '/_protected/(dashboard)/home'
    | '/_protected/(dashboard)/books/$bookId'
    | '/_protected/(dashboard)/books/add'
    | '/_protected/(dashboard)/books/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/(dashboard)': {
      id: '/_protected/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtecteddashboardRouteRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/(dashboard)/home': {
      id: '/_protected/(dashboard)/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof ProtecteddashboardHomeLazyRouteImport
      parentRoute: typeof ProtecteddashboardRouteRoute
    }
    '/_protected/(dashboard)/add-book': {
      id: '/_protected/(dashboard)/add-book'
      path: '/add-book'
      fullPath: '/add-book'
      preLoaderRoute: typeof ProtecteddashboardAddBookLazyRouteImport
      parentRoute: typeof ProtecteddashboardRouteRoute
    }
    '/_protected/(dashboard)/books/': {
      id: '/_protected/(dashboard)/books/'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof ProtecteddashboardBooksIndexLazyRouteImport
      parentRoute: typeof ProtecteddashboardRouteRoute
    }
    '/_protected/(dashboard)/books/add': {
      id: '/_protected/(dashboard)/books/add'
      path: '/books/add'
      fullPath: '/books/add'
      preLoaderRoute: typeof ProtecteddashboardBooksAddLazyRouteImport
      parentRoute: typeof ProtecteddashboardRouteRoute
    }
    '/_protected/(dashboard)/books/$bookId': {
      id: '/_protected/(dashboard)/books/$bookId'
      path: '/books/$bookId'
      fullPath: '/books/$bookId'
      preLoaderRoute: typeof ProtecteddashboardBooksBookIdLazyRouteImport
      parentRoute: typeof ProtecteddashboardRouteRoute
    }
  }
}

interface ProtecteddashboardRouteRouteChildren {
  ProtecteddashboardAddBookLazyRoute: typeof ProtecteddashboardAddBookLazyRoute
  ProtecteddashboardHomeLazyRoute: typeof ProtecteddashboardHomeLazyRoute
  ProtecteddashboardBooksBookIdLazyRoute: typeof ProtecteddashboardBooksBookIdLazyRoute
  ProtecteddashboardBooksAddLazyRoute: typeof ProtecteddashboardBooksAddLazyRoute
  ProtecteddashboardBooksIndexLazyRoute: typeof ProtecteddashboardBooksIndexLazyRoute
}

const ProtecteddashboardRouteRouteChildren: ProtecteddashboardRouteRouteChildren =
  {
    ProtecteddashboardAddBookLazyRoute: ProtecteddashboardAddBookLazyRoute,
    ProtecteddashboardHomeLazyRoute: ProtecteddashboardHomeLazyRoute,
    ProtecteddashboardBooksBookIdLazyRoute:
      ProtecteddashboardBooksBookIdLazyRoute,
    ProtecteddashboardBooksAddLazyRoute: ProtecteddashboardBooksAddLazyRoute,
    ProtecteddashboardBooksIndexLazyRoute:
      ProtecteddashboardBooksIndexLazyRoute,
  }

const ProtecteddashboardRouteRouteWithChildren =
  ProtecteddashboardRouteRoute._addFileChildren(
    ProtecteddashboardRouteRouteChildren,
  )

interface ProtectedRouteChildren {
  ProtecteddashboardRouteRoute: typeof ProtecteddashboardRouteRouteWithChildren
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtecteddashboardRouteRoute: ProtecteddashboardRouteRouteWithChildren,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
